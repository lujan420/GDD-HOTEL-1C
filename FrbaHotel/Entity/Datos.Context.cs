//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrbaHotel.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GD1C2018Entities1 : DbContext
    {
        public GD1C2018Entities1()
            : base("name=GD1C2018Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<baja_de_hotel> baja_de_hotel { get; set; }
        public virtual DbSet<ciudad> ciudad { get; set; }
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<consumible> consumible { get; set; }
        public virtual DbSet<consumible_por_estadia> consumible_por_estadia { get; set; }
        public virtual DbSet<direccion> direccion { get; set; }
        public virtual DbSet<estadia> estadia { get; set; }
        public virtual DbSet<estado_reserva> estado_reserva { get; set; }
        public virtual DbSet<factura> factura { get; set; }
        public virtual DbSet<funcionalidad> funcionalidad { get; set; }
        public virtual DbSet<habitacion> habitacion { get; set; }
        public virtual DbSet<hotel> hotel { get; set; }
        public virtual DbSet<item_factura> item_factura { get; set; }
        public virtual DbSet<metodo_de_pago> metodo_de_pago { get; set; }
        public virtual DbSet<pais> pais { get; set; }
        public virtual DbSet<regimen> regimen { get; set; }
        public virtual DbSet<regimen_por_hotel> regimen_por_hotel { get; set; }
        public virtual DbSet<reserva> reserva { get; set; }
        public virtual DbSet<rol> rol { get; set; }
        public virtual DbSet<rol_por_funcionalidad> rol_por_funcionalidad { get; set; }
        public virtual DbSet<tipo_documento> tipo_documento { get; set; }
        public virtual DbSet<tipoDeHabitacion> tipoDeHabitacion { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
    
        public virtual int sp_asignar_funcionalidad(string rol_nombre, Nullable<int> funcionalidad)
        {
            var rol_nombreParameter = rol_nombre != null ?
                new ObjectParameter("Rol_nombre", rol_nombre) :
                new ObjectParameter("Rol_nombre", typeof(string));
    
            var funcionalidadParameter = funcionalidad.HasValue ?
                new ObjectParameter("Funcionalidad", funcionalidad) :
                new ObjectParameter("Funcionalidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_asignar_funcionalidad", rol_nombreParameter, funcionalidadParameter);
        }
    
        public virtual int sp_chequear_asignacion_rol(string rol_nombre, Nullable<int> funcionalidad)
        {
            var rol_nombreParameter = rol_nombre != null ?
                new ObjectParameter("Rol_nombre", rol_nombre) :
                new ObjectParameter("Rol_nombre", typeof(string));
    
            var funcionalidadParameter = funcionalidad.HasValue ?
                new ObjectParameter("Funcionalidad", funcionalidad) :
                new ObjectParameter("Funcionalidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_chequear_asignacion_rol", rol_nombreParameter, funcionalidadParameter);
        }
    
        public virtual int sp_chequear_existencia_rol(string rol_nombre)
        {
            var rol_nombreParameter = rol_nombre != null ?
                new ObjectParameter("Rol_nombre", rol_nombre) :
                new ObjectParameter("Rol_nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_chequear_existencia_rol", rol_nombreParameter);
        }
    
        public virtual int sp_desasignar_funcionalidad(string rol_nombre, Nullable<int> funcionalidad)
        {
            var rol_nombreParameter = rol_nombre != null ?
                new ObjectParameter("Rol_nombre", rol_nombre) :
                new ObjectParameter("Rol_nombre", typeof(string));
    
            var funcionalidadParameter = funcionalidad.HasValue ?
                new ObjectParameter("Funcionalidad", funcionalidad) :
                new ObjectParameter("Funcionalidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_desasignar_funcionalidad", rol_nombreParameter, funcionalidadParameter);
        }
    
        public virtual int sp_modificar_rol(string nombre_rol_a_modificar, string nuevo_nombre, Nullable<int> estado_nuevo, Nullable<int> funcionalidad_nueva)
        {
            var nombre_rol_a_modificarParameter = nombre_rol_a_modificar != null ?
                new ObjectParameter("Nombre_rol_a_modificar", nombre_rol_a_modificar) :
                new ObjectParameter("Nombre_rol_a_modificar", typeof(string));
    
            var nuevo_nombreParameter = nuevo_nombre != null ?
                new ObjectParameter("Nuevo_nombre", nuevo_nombre) :
                new ObjectParameter("Nuevo_nombre", typeof(string));
    
            var estado_nuevoParameter = estado_nuevo.HasValue ?
                new ObjectParameter("estado_nuevo", estado_nuevo) :
                new ObjectParameter("estado_nuevo", typeof(int));
    
            var funcionalidad_nuevaParameter = funcionalidad_nueva.HasValue ?
                new ObjectParameter("funcionalidad_nueva", funcionalidad_nueva) :
                new ObjectParameter("funcionalidad_nueva", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_modificar_rol", nombre_rol_a_modificarParameter, nuevo_nombreParameter, estado_nuevoParameter, funcionalidad_nuevaParameter);
        }
    
        public virtual ObjectResult<sp_mostrar_roles_Result> sp_mostrar_roles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_mostrar_roles_Result>("sp_mostrar_roles");
        }
    
        public virtual int sp_rol_crear(string nombre_rol)
        {
            var nombre_rolParameter = nombre_rol != null ?
                new ObjectParameter("Nombre_rol", nombre_rol) :
                new ObjectParameter("Nombre_rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_rol_crear", nombre_rolParameter);
        }
    
        public virtual int sp_rol_dar_de_baja(string nombre_rol)
        {
            var nombre_rolParameter = nombre_rol != null ?
                new ObjectParameter("Nombre_rol", nombre_rol) :
                new ObjectParameter("Nombre_rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_rol_dar_de_baja", nombre_rolParameter);
        }
    
        public virtual int sp_rol_modificar_estado(string nombre_rol, Nullable<int> estado_modificado)
        {
            var nombre_rolParameter = nombre_rol != null ?
                new ObjectParameter("Nombre_rol", nombre_rol) :
                new ObjectParameter("Nombre_rol", typeof(string));
    
            var estado_modificadoParameter = estado_modificado.HasValue ?
                new ObjectParameter("estado_modificado", estado_modificado) :
                new ObjectParameter("estado_modificado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_rol_modificar_estado", nombre_rolParameter, estado_modificadoParameter);
        }
    }
}
